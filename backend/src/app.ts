import swagger from '@fastify/swagger';
import swaggerUi from '@fastify/swagger-ui';
import Fastify from "fastify";
import dbPlugin from "./plugins/db";
import authPlugin from "./plugins/auth";
import betterAuthHandler from "./plugins/betterAuthHandler";
import routes from "./routes";
import type { ZodTypeProvider } from "fastify-type-provider-zod";
import {
  serializerCompiler,
  validatorCompiler,
} from "fastify-type-provider-zod";

export const buildApp = async () => {
  const fastify = Fastify({ logger: true }).withTypeProvider<ZodTypeProvider>();

  // Hook in Zod validator & serializer
  fastify.setValidatorCompiler(validatorCompiler);
  fastify.setSerializerCompiler(serializerCompiler);

  // Register Swagger plugins
  await fastify.register(swagger, {
    openapi: {
      openapi: '3.0.0',
      info: {
        title: 'Catalyze API',
        description: 'API documentation for Catalyze platform',
        version: '1.0.0'
      },
      servers: [
        {
          url: 'http://localhost:3000/api',
          description: 'Development server'
        }
      ],
      externalDocs: {
        description: 'Better Auth OpenAPI (auth endpoints generated by better-auth plugin)',
        url: '/api/auth/reference'
      },
      tags: [
        {
          name: 'Authentication',
          description:
            'Endpoints related to authentication (email/password, email OTP) and session management. Protected endpoints typically require a valid session cookie.'
        }
      ],
      components: {
        securitySchemes: {
          sessionCookie: {
            type: 'apiKey',
            in: 'cookie',
            name: 'catalyze_session',
            description:
              'Cookie-based session. Enter only the token value in the Authorize dialog; Swagger UI will send it as `Cookie: catalyze_session=<value>`. Obtain a valid value by signing in via /api/auth endpoints or from your browser session.'
          }
        }
      },
      security: [{ sessionCookie: [] }]
    }
  });

  await fastify.register(swaggerUi, {
    routePrefix: '/api/docs',
    uiConfig: {
      docExpansion: 'full',
      deepLinking: false,
      persistAuthorization: true,
      displayRequestDuration: true,
      layout: 'modern',
    },
    theme: {
      title: 'Catalyze API Docs',
      js: [
        {
          filename: 'theme.js',
          content: `
            (function(){
              try {
                document.documentElement.setAttribute('data-swagger-theme', 'dark');
                console.log('[Catalyze] Swagger UI dark theme script loaded');
              } catch (e) { /* noop */ }
            })();
          `
        }
      ],
      css: [
        {
          filename: 'dark.css',
          content: `
            :root { --bg:#0b0f14; --panel:#0f1720; --text:#e2e8f0; --muted:#cbd5e1; --border:#1f2937; }
            html, body { background-color: var(--bg) !important; color: var(--text) !important; }
            .swagger-ui, .swagger-ui .wrapper { background-color: var(--bg) !important; color: var(--text) !important; }
            .swagger-ui .topbar { background: var(--panel) !important; border-bottom: 1px solid var(--border) !important; }
            .swagger-ui .info, .swagger-ui .scheme-container, .swagger-ui .models, .swagger-ui .model-box,
            .swagger-ui .model-box .model, .swagger-ui .information-container, .swagger-ui .col, .swagger-ui .opblock-tag-section {
              background-color: var(--panel) !important; color: var(--text) !important; border-color: var(--border) !important;
            }
            .swagger-ui .opblock { background-color: var(--panel) !important; border: 1px solid var(--border) !important; box-shadow: none !important; }
            .swagger-ui .opblock-summary { background-color: var(--panel) !important; }
            .swagger-ui .opblock-summary-method { filter: saturate(0.9) brightness(0.9); }
            .swagger-ui .opblock-description-wrapper, .swagger-ui .opblock-section-header, .swagger-ui .responses-wrapper { background-color: var(--panel) !important; color: var(--text) !important; }
            .swagger-ui .opblock.opblock-post { border-color: #0ea5e9 !important; }
            .swagger-ui .opblock.opblock-get { border-color: #22c55e !important; }
            .swagger-ui .opblock.opblock-delete { border-color: #ef4444 !important; }
            .swagger-ui .opblock.opblock-put { border-color: #f59e0b !important; }
            .swagger-ui .parameter__name, .swagger-ui .parameter__type, .swagger-ui .response-col_status, .swagger-ui .response-col_description,
            .swagger-ui .opblock-summary-path, .swagger-ui .opblock-summary-description, .swagger-ui .tab li, .swagger-ui .nostyle { color: var(--muted) !important; }
            .swagger-ui .btn, .swagger-ui .authorize { background-color: #1f2937 !important; color: var(--text) !important; border-color: #374151 !important; }
            .swagger-ui input[type='text'], .swagger-ui textarea, .swagger-ui select { background-color: #111827 !important; color: #e5e7eb !important; border: 1px solid #374151 !important; }
            .swagger-ui .responses-inner, .swagger-ui .response { background-color: var(--panel) !important; color: var(--text) !important; }
            .swagger-ui pre, .swagger-ui code, .swagger-ui .highlight-code, .swagger-ui .microlight { background-color: var(--bg) !important; color: var(--text) !important; }
            .swagger-ui table thead tr th, .swagger-ui table tbody tr td { border-color: var(--border) !important; }
            .swagger-ui .markdown a, .swagger-ui a, .swagger-ui .info a { color: #93c5fd !important; }
          `
        }
      ]
    },
    staticCSP: "default-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; script-src 'self'; connect-src 'self'; font-src 'self' data:",
    transformStaticCSP: (header) => header
  });

  // Register plugins
  await fastify.register(dbPlugin);
  await fastify.register(authPlugin);

  fastify.get("/api/debug-auth", async () => {
    const hasAuth = "auth" in fastify;
    const sessionFunc = hasAuth && typeof fastify.auth?.api?.getSession === "function";
    return { hasAuth, sessionFunc };
  });


  // Register Better Auth handler
  await fastify.register(betterAuthHandler, { prefix: '/api' });

  // register all other routes
  fastify.register(routes, { prefix: "/api" });

  return fastify;
};
