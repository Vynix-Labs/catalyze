import swagger from '@fastify/swagger';
import swaggerUi from '@fastify/swagger-ui';
import Fastify from "fastify";
import dbPlugin from "./plugins/db";
import authPlugin from "./plugins/auth";
import redisPlugin from "./plugins/redis";
import queuePlugin from "./plugins/queue";
import betterAuthHandler from "./plugins/betterAuthHandler";
import routes from "./routes";
import type { ZodTypeProvider } from "fastify-type-provider-zod";
import {
  serializerCompiler,
  validatorCompiler,
} from "fastify-type-provider-zod";

export const buildApp = async () => {
  const fastify = Fastify({ logger: true }).withTypeProvider<ZodTypeProvider>();

  // Hook in Zod validator & serializer
  fastify.setValidatorCompiler(validatorCompiler);
  fastify.setSerializerCompiler(serializerCompiler);

  // Register Swagger plugins
  await fastify.register(swagger, {
    openapi: {
      openapi: '3.0.0',
      info: {
        title: 'Catalyze API',
        description: 'API documentation for Catalyze platform',
        version: '1.0.0'
      },
      servers: [
        {
          url: 'http://localhost:3000/api',
          description: 'Development server'
        }
      ],
      externalDocs: {
        description: 'Better Auth OpenAPI (auth endpoints generated by better-auth plugin)',
        url: '/api/auth/reference'
      },
      tags: [
        {
          name: 'Authentication',
          description:
            'Endpoints related to authentication (email/password, email OTP) and session management. Protected endpoints typically require a valid session cookie.'
        }
      ],
      components: {
        securitySchemes: {
          sessionCookie: {
            type: 'apiKey',
            in: 'cookie',
            name: 'catalyze_session',
            description:
              'Cookie-based session. Enter only the token value in the Authorize dialog; Swagger UI will send it as `Cookie: catalyze_session=<value>`. Obtain a valid value by signing in via /api/auth endpoints or from your browser session.'
          }
        }
      },
      security: [{ sessionCookie: [] }]
    }
  });

  await fastify.register(swaggerUi, {
    routePrefix: '/api/docs',
    uiConfig: {
      docExpansion: 'full',
      deepLinking: false,
      persistAuthorization: true,
      displayRequestDuration: true,
      layout: 'modern',
    },
    staticCSP: "default-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; script-src 'self'; connect-src 'self'; font-src 'self' data:",
    transformStaticCSP: (header) => header
  });

  // Register plugins
  await fastify.register(dbPlugin);
  await fastify.register(redisPlugin);
  await fastify.register(queuePlugin);
  await fastify.register(authPlugin);

  fastify.get("/api/debug-auth", async () => {
    const hasAuth = "auth" in fastify;
    const sessionFunc = hasAuth && typeof fastify.auth?.api?.getSession === "function";
    return { hasAuth, sessionFunc };
  });


  // Register Better Auth handler
  await fastify.register(betterAuthHandler, { prefix: '/api' });

  // register all other routes
  fastify.register(routes, { prefix: "/api" });

  return fastify;
};
